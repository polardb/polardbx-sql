## DISABLE_FAST_SQL_PARSER
## test create table(date)
CREATE TABLE `d1` (
`d` date DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY HASH(DAYOFMONTH(`d`))
PARTITIONS 16;
show create table d1;
Table,Create Table
d1,CREATE TABLE `d1` (
	`d` date DEFAULT NULL,
	KEY `auto_shard_key_d` USING BTREE (`d`)
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY HASH(DAYOFMONTH(`d`))
PARTITIONS 16
## single insert
insert into d1 values('2022-07-18');
select d from d1 order by d;
d
2022-07-18
## multi values insert
insert into d1 values ('2022-06-18'), ('2022-07-19'), ('2021-07-20');
## check point select
select * from d1 where d = '2022-07-18' order by d;
d
2022-07-18
select * from d1 where d = '2022-06-18' order by d;
d
2022-06-18
select * from d1 where d = '2022-07-19' order by d;
d
2022-07-19
select * from d1 where d = '2021-07-20' order by d;
d
2021-07-20
## explain
explain select * from d1 where d = '2022-07-18' order by d;
Logical ExecutionPlan
PhyTableOperation(tables="d1[p11]", sql="SELECT `d1`.`d` FROM ? AS `d1` WHERE (`d1`.`d` = ?) ORDER BY `d`", params="2022-07-18")
explain select * from d1 where d = '2022-06-18' order by d;
Logical ExecutionPlan
PhyTableOperation(tables="d1[p11]", sql="SELECT `d1`.`d` FROM ? AS `d1` WHERE (`d1`.`d` = ?) ORDER BY `d`", params="2022-06-18")
explain select * from d1 where d = '2022-07-19' order by d;
Logical ExecutionPlan
PhyTableOperation(tables="d1[p12]", sql="SELECT `d1`.`d` FROM ? AS `d1` WHERE (`d1`.`d` = ?) ORDER BY `d`", params="2022-07-19")
explain select * from d1 where d = '2021-07-20' order by d;
Logical ExecutionPlan
PhyTableOperation(tables="d1[p3]", sql="SELECT `d1`.`d` FROM ? AS `d1` WHERE (`d1`.`d` = ?) ORDER BY `d`", params="2021-07-20")
## range select
select * from d1 where (d < '2022-07-18' and d > '2021-07-20') or d between '2020-07-18' and '2021-07-20' order by d;
d
2021-07-20
2022-06-18
## range select full scan
select * from d1 where d > '2021-07-21' order by d;
d
2022-06-18
2022-07-18
2022-07-19
explain select * from d1 where d > '2021-07-21' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d1[p1,p2,p3,...p16]", shardCount=16, sql="SELECT `d` FROM `d1` AS `d1` WHERE (`d` > ?) ORDER BY `d`")
select * from d1 where d > '2021-07-18' and d <= '2050-07-18' order by d;
d
2021-07-20
2022-06-18
2022-07-18
2022-07-19
explain select * from d1 where d > '2021-07-18' and d <= '2050-07-18' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d1[p1,p2,p3,...p16]", shardCount=16, sql="SELECT `d` FROM `d1` AS `d1` WHERE ((`d` > ?) AND (`d` <= ?)) ORDER BY `d`")
## partition enumeration
select * from d1 where d >= '2022-07-18' and d <= '2022-07-22' order by d;
d
2022-07-18
2022-07-19
explain select * from d1 where d >= '2022-07-18' and d <= '2022-07-22' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d1[p1,p3,p11,p12,p14]", shardCount=5, sql="SELECT `d` FROM `d1` AS `d1` WHERE ((`d` >= ?) AND (`d` <= ?)) ORDER BY `d`")
## test create table (datetime)
CREATE TABLE `d2` (
`dt` datetime DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY HASH(DAYOFMONTH(`dt`))
PARTITIONS 16;
show create table d2;
Table,Create Table
d2,CREATE TABLE `d2` (
	`dt` datetime DEFAULT NULL,
	KEY `auto_shard_key_dt` USING BTREE (`dt`)
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY HASH(DAYOFMONTH(`dt`))
PARTITIONS 16
## prepare data
insert into d2 values('2022-07-18 23:59:59'),('2022-06-18 23:59:59'),('2022-07-19 00:00:00'),('2021-07-20 00:00:01');
## range select
select * from d2 where (dt < '2022-07-18 21:59:59' and dt > '2021-07-20 00:00:01') or dt between '2020-07-18 00:00:00' and '2021-07-20 00:00:01' order by dt;
dt
2021-07-20 00:00:01.0
2022-06-18 23:59:59.0
## range select full scan
select * from d2 where dt > '2021-07-21 00:00:00' order by dt;
dt
2022-06-18 23:59:59.0
2022-07-18 23:59:59.0
2022-07-19 00:00:00.0
explain select * from d2 where dt > '2021-07-21 00:00:00' order by dt;
Logical ExecutionPlan
MergeSort(sort="dt ASC")
  LogicalView(tables="d2[p1,p2,p3,...p16]", shardCount=16, sql="SELECT `dt` FROM `d2` AS `d2` WHERE (`dt` > ?) ORDER BY `dt`")
select * from d2 where dt > '2021-07-18 23:59:59' and dt <= '2050-07-18 23:59:59' order by dt;
dt
2021-07-20 00:00:01.0
2022-06-18 23:59:59.0
2022-07-18 23:59:59.0
2022-07-19 00:00:00.0
explain select * from d2 where dt > '2021-07-18 23:59:59' and dt <= '2050-07-18 23:59:59' order by dt;
Logical ExecutionPlan
MergeSort(sort="dt ASC")
  LogicalView(tables="d2[p1,p2,p3,...p16]", shardCount=16, sql="SELECT `dt` FROM `d2` AS `d2` WHERE ((`dt` > ?) AND (`dt` <= ?)) ORDER BY `dt`")
## partition enumeration
select * from d2 where dt >= '2022-07-18' and dt <= '2022-07-22' order by dt;
dt
2022-07-18 23:59:59.0
2022-07-19 00:00:00.0
explain select * from d2 where dt >= '2022-07-18' and dt <= '2022-07-22' order by dt;
Logical ExecutionPlan
MergeSort(sort="dt ASC")
  LogicalView(tables="d2[p1,p3,p11,p12,p14]", shardCount=5, sql="SELECT `dt` FROM `d2` AS `d2` WHERE ((`dt` >= ?) AND (`dt` <= ?)) ORDER BY `dt`")
## test range partition(date)
CREATE TABLE `d3` (
`d` date DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY RANGE(DAYOFMONTH(`d`))
(PARTITION p0 VALUES LESS THAN (7) ENGINE = InnoDB,
PARTITION p1 VALUES LESS THAN (14) ENGINE = InnoDB,
PARTITION p2 VALUES LESS THAN (21) ENGINE = InnoDB,
PARTITION pd VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB);
show create table d3;
Table,Create Table
d3,CREATE TABLE `d3` (
	`d` date DEFAULT NULL,
	KEY `auto_shard_key_d` USING BTREE (`d`)
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY RANGE(DAYOFMONTH(`d`))
(PARTITION p0 VALUES LESS THAN (7) ENGINE = InnoDB,
 PARTITION p1 VALUES LESS THAN (14) ENGINE = InnoDB,
 PARTITION p2 VALUES LESS THAN (21) ENGINE = InnoDB,
 PARTITION pd VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB)
## prepare data
insert into d3 values ('2022-07-01'), ('2022-07-07'), ('2022-07-14'), ('2022-07-21');
select * from d3 order by d;
d
2022-07-01
2022-07-07
2022-07-14
2022-07-21
## check point select
select * from d3 where d = '2022-07-01';
d
2022-07-01
select * from d3 where d = '2022-07-07';
d
2022-07-07
select * from d3 where d = '2022-07-14';
d
2022-07-14
select * from d3 where d = '2022-07-21';
d
2022-07-21
## explain p0, p1, p2, pd is expected
explain select * from d3 where d = '2022-07-01';
Logical ExecutionPlan
PhyTableOperation(tables="d3[p0]", sql="SELECT `d3`.`d` FROM ? AS `d3` WHERE (`d3`.`d` = ?)", params="2022-07-01")
explain select * from d3 where d = '2022-07-07';
Logical ExecutionPlan
PhyTableOperation(tables="d3[p1]", sql="SELECT `d3`.`d` FROM ? AS `d3` WHERE (`d3`.`d` = ?)", params="2022-07-07")
explain select * from d3 where d = '2022-07-14';
Logical ExecutionPlan
PhyTableOperation(tables="d3[p2]", sql="SELECT `d3`.`d` FROM ? AS `d3` WHERE (`d3`.`d` = ?)", params="2022-07-14")
explain select * from d3 where d = '2022-07-21';
Logical ExecutionPlan
PhyTableOperation(tables="d3[pd]", sql="SELECT `d3`.`d` FROM ? AS `d3` WHERE (`d3`.`d` = ?)", params="2022-07-21")
## range select
select * from d3 where (d < '2022-07-21' and d > '2022-07-07') or d between '2022-07-01' and '2022-07-07' order by d;
d
2022-07-01
2022-07-07
2022-07-14
## range select full scan
select * from d3 where d < '2022-07-07' order by d;
d
2022-07-01
explain select * from d3 where d < '2022-07-07' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d3[p0,p1,p2,pd]", shardCount=4, sql="SELECT `d` FROM `d3` AS `d3` WHERE (`d` < ?) ORDER BY `d`")
select * from d3 where d < '2022-07-07' and d >= '2022-05-01' order by d;
d
2022-07-01
explain select * from d3 where d < '2022-07-07' and d >= '2022-05-01' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d3[p0,p1,p2,pd]", shardCount=4, sql="SELECT `d` FROM `d3` AS `d3` WHERE ((`d` < ?) AND (`d` >= ?)) ORDER BY `d`")
## partition enumeration
select * from d3 where d < '2022-07-07' and d >= '2022-07-01' order by d;
d
2022-07-01
explain select * from d3 where d < '2022-07-07' and d >= '2022-07-01' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d3[p0,p1]", shardCount=2, sql="SELECT `d` FROM `d3` AS `d3` WHERE ((`d` < ?) AND (`d` >= ?)) ORDER BY `d`")
## test range partition(datetime)
CREATE TABLE `d4` (
`dt` datetime DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY RANGE(DAYOFMONTH(`dt`))
(PARTITION p0 VALUES LESS THAN (7) ENGINE = InnoDB,
PARTITION p1 VALUES LESS THAN (14) ENGINE = InnoDB,
PARTITION p2 VALUES LESS THAN (21) ENGINE = InnoDB,
PARTITION pd VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB);
show create table d4;
Table,Create Table
d4,CREATE TABLE `d4` (
	`dt` datetime DEFAULT NULL,
	KEY `auto_shard_key_dt` USING BTREE (`dt`)
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY RANGE(DAYOFMONTH(`dt`))
(PARTITION p0 VALUES LESS THAN (7) ENGINE = InnoDB,
 PARTITION p1 VALUES LESS THAN (14) ENGINE = InnoDB,
 PARTITION p2 VALUES LESS THAN (21) ENGINE = InnoDB,
 PARTITION pd VALUES LESS THAN (MAXVALUE) ENGINE = InnoDB)
## prepare data
insert into d4 values ('2022-07-01 00:00:00'), ('2022-07-07 00:00:00'), ('2022-07-14 00:00:00'), ('2022-07-21 00:00:00');
select * from d4 order by dt;
dt
2022-07-01 00:00:00.0
2022-07-07 00:00:00.0
2022-07-14 00:00:00.0
2022-07-21 00:00:00.0
## check point select
select * from d4 where dt = '2022-07-01 00:00:00';
dt
2022-07-01 00:00:00.0
select * from d4 where dt = '2022-07-07 00:00:00';
dt
2022-07-07 00:00:00.0
select * from d4 where dt = '2022-07-14 00:00:00';
dt
2022-07-14 00:00:00.0
select * from d4 where dt = '2022-07-21 00:00:00';
dt
2022-07-21 00:00:00.0
## explain p0, p1, p2, pd is expected
explain select * from d4 where dt = '2022-07-01 00:00:00';
Logical ExecutionPlan
PhyTableOperation(tables="d4[p0]", sql="SELECT `d4`.`dt` FROM ? AS `d4` WHERE (`d4`.`dt` = ?)", params="2022-07-01 00:00:00")
explain select * from d4 where dt = '2022-07-07 00:00:00';
Logical ExecutionPlan
PhyTableOperation(tables="d4[p1]", sql="SELECT `d4`.`dt` FROM ? AS `d4` WHERE (`d4`.`dt` = ?)", params="2022-07-07 00:00:00")
explain select * from d4 where dt = '2022-07-14 00:00:00';
Logical ExecutionPlan
PhyTableOperation(tables="d4[p2]", sql="SELECT `d4`.`dt` FROM ? AS `d4` WHERE (`d4`.`dt` = ?)", params="2022-07-14 00:00:00")
explain select * from d4 where dt = '2022-07-21 00:00:00';
Logical ExecutionPlan
PhyTableOperation(tables="d4[pd]", sql="SELECT `d4`.`dt` FROM ? AS `d4` WHERE (`d4`.`dt` = ?)", params="2022-07-21 00:00:00")
## range select
select * from d4 where (dt < '2022-07-21 00:00:00' and dt > '2022-07-07 00:00:00') or dt between '2022-07-01 00:00:00' and '2022-07-07 00:00:00' order by dt;
dt
2022-07-01 00:00:00.0
2022-07-07 00:00:00.0
2022-07-14 00:00:00.0
## range select full scan
select * from d4 where dt < '2022-07-07' order by dt;
dt
2022-07-01 00:00:00.0
explain select * from d4 where dt < '2022-07-07' order by dt;
Logical ExecutionPlan
MergeSort(sort="dt ASC")
  LogicalView(tables="d4[p0,p1,p2,pd]", shardCount=4, sql="SELECT `dt` FROM `d4` AS `d4` WHERE (`dt` < ?) ORDER BY `dt`")
select * from d4 where dt < '2022-07-07' and dt >= '2022-05-01' order by dt;
dt
2022-07-01 00:00:00.0
explain select * from d4 where dt < '2022-07-07' and dt >= '2022-05-01' order by dt;
Logical ExecutionPlan
MergeSort(sort="dt ASC")
  LogicalView(tables="d4[p0,p1,p2,pd]", shardCount=4, sql="SELECT `dt` FROM `d4` AS `d4` WHERE ((`dt` < ?) AND (`dt` >= ?)) ORDER BY `dt`")
## partition enumeration
select * from d4 where dt < '2022-07-07' and dt >= '2022-07-01' order by dt;
dt
2022-07-01 00:00:00.0
explain select * from d4 where dt < '2022-07-07' and dt >= '2022-07-01' order by dt;
Logical ExecutionPlan
MergeSort(sort="dt ASC")
  LogicalView(tables="d4[p0,p1]", shardCount=2, sql="SELECT `dt` FROM `d4` AS `d4` WHERE ((`dt` < ?) AND (`dt` >= ?)) ORDER BY `dt`")
## test list
CREATE TABLE `d5` (
`d` date DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY LIST(DAYOFMONTH(`d`))
(PARTITION p0 VALUES IN (1,2,3,4,5,6,7) ENGINE = InnoDB,
PARTITION p1 VALUES IN (8,9,10,11,12,13,14) ENGINE = InnoDB,
PARTITION p2 VALUES IN (15,16,17,18,19,20,21) ENGINE = InnoDB,
PARTITION pd VALUES IN (DEFAULT) ENGINE = InnoDB);
show create table d5;
Table,Create Table
d5,CREATE TABLE `d5` (
	`d` date DEFAULT NULL,
	KEY `auto_shard_key_d` USING BTREE (`d`)
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY LIST(DAYOFMONTH(`d`))
(PARTITION p0 VALUES IN (1,2,3,4,5,6,7) ENGINE = InnoDB,
 PARTITION p1 VALUES IN (8,9,10,11,12,13,14) ENGINE = InnoDB,
 PARTITION p2 VALUES IN (15,16,17,18,19,20,21) ENGINE = InnoDB,
 PARTITION pd VALUES IN (DEFAULT) ENGINE = InnoDB)
## prepare data
insert into d5 values ('2022-07-07'), ('2022-07-14'), ('2022-07-21'), ('2022-07-22');
select * from d5 order by d;
d
2022-07-07
2022-07-14
2022-07-21
2022-07-22
## check point select
select * from d5 where d = '2022-07-07';
d
2022-07-07
select * from d5 where d = '2022-07-14';
d
2022-07-14
select * from d5 where d = '2022-07-21';
d
2022-07-21
select * from d5 where d = '2022-07-22';
d
2022-07-22
## explain point select
explain select * from d5 where d = '2022-07-07';
Logical ExecutionPlan
PhyTableOperation(tables="d5[p0]", sql="SELECT `d5`.`d` FROM ? AS `d5` WHERE (`d5`.`d` = ?)", params="2022-07-07")
explain select * from d5 where d = '2022-07-14';
Logical ExecutionPlan
PhyTableOperation(tables="d5[p1]", sql="SELECT `d5`.`d` FROM ? AS `d5` WHERE (`d5`.`d` = ?)", params="2022-07-14")
explain select * from d5 where d = '2022-07-21';
Logical ExecutionPlan
PhyTableOperation(tables="d5[p2]", sql="SELECT `d5`.`d` FROM ? AS `d5` WHERE (`d5`.`d` = ?)", params="2022-07-21")
explain select * from d5 where d = '2022-07-22';
Logical ExecutionPlan
PhyTableOperation(tables="d5[pd]", sql="SELECT `d5`.`d` FROM ? AS `d5` WHERE (`d5`.`d` = ?)", params="2022-07-22")
## range select
select * from d5 where (d < '2022-07-21' and d > '2022-07-07') or d between '2022-07-21' and '2022-07-22' order by d;
d
2022-07-14
2022-07-21
2022-07-22
## range select full scan
select * from d5 where d < '2022-07-07' order by d;
d
explain select * from d5 where d < '2022-07-07' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d5[p0,p1,p2,pd]", shardCount=4, sql="SELECT `d` FROM `d5` AS `d5` WHERE (`d` < ?) ORDER BY `d`")
select * from d5 where d < '2022-07-08' and d >= '2022-05-01' order by d;
d
2022-07-07
explain select * from d5 where d < '2022-07-08' and d >= '2022-05-01' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d5[p0,p1,p2,pd]", shardCount=4, sql="SELECT `d` FROM `d5` AS `d5` WHERE ((`d` < ?) AND (`d` >= ?)) ORDER BY `d`")
## partition enumeration
select * from d5 where d < '2022-07-08' and d >= '2022-07-01' order by d;
d
2022-07-07
explain select * from d5 where d < '2022-07-08' and d >= '2022-07-01' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d5[p0,p1]", shardCount=2, sql="SELECT `d` FROM `d5` AS `d5` WHERE ((`d` < ?) AND (`d` >= ?)) ORDER BY `d`")
## test range select on leap year
CREATE TABLE `d6` (
`d` date DEFAULT NULL
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4
PARTITION BY HASH(DAYOFMONTH(`d`))
PARTITIONS 16;
## prepare data
insert into d6 values ('2020-02-27'), ('2020-02-28'),('2020-02-29'),('2022-02-28'),('2022-03-26');
## range select
select * from d6 where d > '2020-02-26' and d < '2022-03-01' order by d;
d
2020-02-27
2020-02-28
2020-02-29
2022-02-28
select * from d6 where d >= '2020-02-28' and d <= '2022-03-26' order by d;
d
2020-02-28
2020-02-29
2022-02-28
2022-03-26
select * from d6 where d >= '2021-12-31' order by d;
d
2022-02-28
2022-03-26
## partition enumeration
# leap year
select * from d6 where d >= '2020-02-27' and d <= '2020-03-01' order by d;
d
2020-02-27
2020-02-28
2020-02-29
explain select * from d6 where d >= '2020-02-27' and d <= '2020-03-01' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d6[p1,p13,p14]", shardCount=3, sql="SELECT `d` FROM `d6` AS `d6` WHERE ((`d` >= ?) AND (`d` <= ?)) ORDER BY `d`")
# non-leap year
select * from d6 where d >= '2021-02-27' and d <= '2021-03-01' order by d;
d
explain select * from d6 where d >= '2021-02-27' and d <= '2021-03-01' order by d;
Logical ExecutionPlan
MergeSort(sort="d ASC")
  LogicalView(tables="d6[p1,p14]", shardCount=2, sql="SELECT `d` FROM `d6` AS `d6` WHERE ((`d` >= ?) AND (`d` <= ?)) ORDER BY `d`")