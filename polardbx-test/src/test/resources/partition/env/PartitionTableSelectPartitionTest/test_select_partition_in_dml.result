## DISABLE_FAST_SQL_PARSER
CREATE TABLE IF NOT EXISTS tbl_with_gsi1 (
  a int NOT NULL,
  b int NOT NULL,
  c int NOT NULL,
  d int NOT NULL,
  GLOBAL INDEX `idxb`(`b`) PARTITION BY RANGE COLUMNS (b) (
    PARTITION p1 VALUES LESS THAN (100),
    PARTITION p2 VALUES LESS THAN (200),
    PARTITION p3 VALUES LESS THAN (300),
     PARTITION p4 VALUES LESS THAN (maxvalue)
  ),
  GLOBAL INDEX `idxd`(`d`) PARTITION BY RANGE COLUMNS (d) (
    PARTITION p1 VALUES LESS THAN (100),
    PARTITION p2 VALUES LESS THAN (200),
    PARTITION p3 VALUES LESS THAN (300),
    PARTITION p4 VALUES LESS THAN (maxvalue)
  )
)
PARTITION BY RANGE COLUMNS (a) (
PARTITION p1 VALUES LESS THAN (10),
PARTITION p2 VALUES LESS THAN (20),
PARTITION p3 VALUES LESS THAN (30),
PARTITION p4 VALUES LESS THAN (maxvalue)
);
CREATE TABLE IF NOT EXISTS tbl_with_gsi2 (
a int NOT NULL,
b int NOT NULL,
c int NOT NULL,
d int NOT NULL,
GLOBAL INDEX `idxb`(`b`) PARTITION BY RANGE COLUMNS (b) (
PARTITION p1 VALUES LESS THAN (100),
PARTITION p2 VALUES LESS THAN (200),
PARTITION p3 VALUES LESS THAN (300),
PARTITION p4 VALUES LESS THAN (maxvalue)
),
GLOBAL INDEX `idxd`(`d`) PARTITION BY RANGE COLUMNS (d) (
PARTITION p1 VALUES LESS THAN (100),
PARTITION p2 VALUES LESS THAN (200),
PARTITION p3 VALUES LESS THAN (300),
PARTITION p4 VALUES LESS THAN (maxvalue)
)
)
PARTITION BY RANGE COLUMNS (a) (
PARTITION p1 VALUES LESS THAN (10),
PARTITION p2 VALUES LESS THAN (20),
PARTITION p3 VALUES LESS THAN (30),
PARTITION p4 VALUES LESS THAN (maxvalue)
);
CREATE TABLE IF NOT EXISTS tbl_with_gsi3 (
a int NOT NULL,
b int NOT NULL,
c int NOT NULL,
d int NOT NULL,
GLOBAL INDEX `idxb`(`b`) PARTITION BY RANGE COLUMNS (b) (
PARTITION p1 VALUES LESS THAN (100),
PARTITION p2 VALUES LESS THAN (200),
PARTITION p3 VALUES LESS THAN (300),
PARTITION p4 VALUES LESS THAN (maxvalue)
),
GLOBAL INDEX `idxd`(`d`) PARTITION BY RANGE COLUMNS (d) (
PARTITION p1 VALUES LESS THAN (100),
PARTITION p2 VALUES LESS THAN (200),
PARTITION p3 VALUES LESS THAN (300),
PARTITION p4 VALUES LESS THAN (maxvalue)
)
)
PARTITION BY RANGE COLUMNS (a) (
PARTITION p1 VALUES LESS THAN (10),
PARTITION p2 VALUES LESS THAN (20),
PARTITION p3 VALUES LESS THAN (30),
PARTITION p4 VALUES LESS THAN (maxvalue)
);
insert into tbl_with_gsi2 values (11,111,300,111);
insert into tbl_with_gsi2 values (22,222,300,222);
insert into tbl_with_gsi2 values (33,333,300,333);
insert into tbl_with_gsi2 values (44,444,300,444);
insert into tbl_with_gsi3 values (11,111,300,111);
insert into tbl_with_gsi3 values (22,222,300,222);
insert into tbl_with_gsi3 values (33,333,300,333);
insert into tbl_with_gsi3 values (44,444,300,444);
select a,b from tbl_with_gsi1 partition(p1);
a,b
# partition selection for single-table select
begin;
explain select * from tbl_with_gsi1 partition(p2) where a=21;
Logical ExecutionPlan
LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` WHERE (`a` = ?)")
select * from tbl_with_gsi1 partition(p2) where a=21;
a,b,c,d
explain select * from tbl_with_gsi1 partition(p2) where a=11;
Logical ExecutionPlan
LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` WHERE (`a` = ?)")
select * from tbl_with_gsi1 partition(p2) where a=11;
a,b,c,d
rollback;
# partition selection for select with join
begin;
explain select * from tbl_with_gsi1 partition(p2) t1 inner join tbl_with_gsi2 partition(p2) t2 on t1.a=t2.a where t1.a=11;
Logical ExecutionPlan
PhyTableOperation(tables="tbl_with_gsi1[p2],tbl_with_gsi2[p2]", sql="SELECT `t1`.`a`, `t1`.`b`, `t1`.`c`, `t1`.`d`, `t2`.`a`, `t2`.`b`, `t2`.`c`, `t2`.`d` FROM ? AS `t1` INNER JOIN ? AS `t2` ON (`t1`.`a` = `t2`.`a`) WHERE (`t1`.`a` = ?)", params="11")
select * from tbl_with_gsi1 partition(p2) t1 inner join tbl_with_gsi2 partition(p2) t2 on t1.a=t2.a where t1.a=11;
a,b,c,d,a,b,c,d
explain select * from tbl_with_gsi1 partition(p4,p2,p3) t1 inner join tbl_with_gsi2 partition(p2,p3,p3) t2 on t1.a=t2.a where t1.a=11;
Logical ExecutionPlan
PhyTableOperation(tables="tbl_with_gsi1[p2],tbl_with_gsi2[p2]", sql="SELECT `t1`.`a`, `t1`.`b`, `t1`.`c`, `t1`.`d`, `t2`.`a`, `t2`.`b`, `t2`.`c`, `t2`.`d` FROM ? AS `t1` INNER JOIN ? AS `t2` ON (`t1`.`a` = `t2`.`a`) WHERE (`t1`.`a` = ?)", params="11")
select * from tbl_with_gsi1 partition(p4,p2,p3) t1 inner join tbl_with_gsi2 partition(p2,p3,p3) t2 on t1.a=t2.a where t1.a=11;
a,b,c,d,a,b,c,d
explain select * from tbl_with_gsi1 partition(p4,p2,p3) t1 inner join tbl_with_gsi2 partition(p2,p3,p3) t2 on t1.a=t2.a;
Logical ExecutionPlan
BKAJoin(condition="a = a", type="inner")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi1[p2,p3,p4]", shardCount=3, sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi1` AS `tbl_with_gsi1`")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi2[p2,p3]", shardCount=2, sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi2` AS `tbl_with_gsi2` WHERE (`a` IN (...))")
select * from tbl_with_gsi1 partition(p4,p2,p1) t1 inner join tbl_with_gsi2 partition(p2,p3,p3) t2 on t1.a=t2.a;
a,b,c,d,a,b,c,d
explain select * from tbl_with_gsi1 partition(p4,p2,p3) t1 inner join tbl_with_gsi2 partition(p2,p3,p4) t2 on t1.a=t2.a order by t1.a;
Logical ExecutionPlan
MergeSort(sort="a ASC")
  LogicalView(tables="tbl_with_gsi1[p2,p3,p4],tbl_with_gsi2[p2,p3,p4]", shardCount=3, sql="SELECT `tbl_with_gsi1`.`a`, `tbl_with_gsi1`.`b`, `tbl_with_gsi1`.`c`, `tbl_with_gsi1`.`d`, `tbl_with_gsi2`.`a` AS `a0`, `tbl_with_gsi2`.`b` AS `b0`, `tbl_with_gsi2`.`c` AS `c0`, `tbl_with_gsi2`.`d` AS `d0` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` INNER JOIN `tbl_with_gsi2` AS `tbl_with_gsi2` ON (`tbl_with_gsi1`.`a` = `tbl_with_gsi2`.`a`) ORDER BY `tbl_with_gsi1`.`a`")
select * from tbl_with_gsi1 partition(p4,p2,p3) t1 inner join tbl_with_gsi2 partition(p2,p3,p4) t2 on t1.a=t2.a order by t1.a;
a,b,c,d,a,b,c,d
rollback;
# partition selection for select with scalar subquery
begin;
explain select * from tbl_with_gsi1 partition(p2) where a in (select a from tbl_with_gsi2 partition(p2));
Logical ExecutionPlan
Gather(concurrent=true)
  LogicalView(tables="tbl_with_gsi1[p2],tbl_with_gsi2[p2]", sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` WHERE (`a` IN (SELECT `a` FROM `tbl_with_gsi2` AS `tbl_with_gsi2`))")
select * from tbl_with_gsi1 partition(p2) where a in (select a from tbl_with_gsi2 partition(p2));
a,b,c,d
explain select * from tbl_with_gsi1 partition(p2) where exists (select a from tbl_with_gsi2 partition(p2));
Logical ExecutionPlan
SemiNLJoin(condition="true", type="semi")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi1` AS `tbl_with_gsi1`")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi2[p2]", sql="SELECT `a` FROM `tbl_with_gsi2` AS `tbl_with_gsi2`")
select * from tbl_with_gsi1 partition(p2) where exists (select a from tbl_with_gsi2 partition(p2));
a,b,c,d
rollback;
# partition selection for select with apply subquery
begin;
explain select * from tbl_with_gsi1 partition(p2) where a in (select a from tbl_with_gsi2 partition(p2) where tbl_with_gsi1.b=tbl_with_gsi2.b order by a limit 5);
Logical ExecutionPlan
Project(a="a", b="b", c="c", d="d")
  Filter(condition="APPLY_BOOLEAN")
    CorrelateApply(cor=$cor0, leftConditions=[$0], opKind=EQUALS, type=SEMI)
      Gather(concurrent=true)
        LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi1` AS `tbl_with_gsi1`")
      TopN(sort="$f0 ASC", offset=0, fetch=?0)
        Project($f0="a")
          Filter(condition="$cor0.b = b")
            Gather(concurrent=true)
              LogicalView(tables="tbl_with_gsi2[p2]", sql="SELECT `a`, `b` FROM `tbl_with_gsi2` AS `tbl_with_gsi2`")
HitCache:false
Source:PLAN_CACHE
cache node:
Gather.DRDS.[].single(input=LogicalView#distribution=single)
Gather.DRDS.[].single(input=LogicalView#distribution=single)
select * from tbl_with_gsi1 partition(p2) where a in (select a from tbl_with_gsi2 partition(p2) where tbl_with_gsi1.b=tbl_with_gsi2.b order by a limit 5);
a,b,c,d
explain select * from tbl_with_gsi1 partition(p2) where a in (select a from tbl_with_gsi2 partition(p2,p4) where tbl_with_gsi1.b=tbl_with_gsi2.b order by a limit 5);
Logical ExecutionPlan
Project(a="a", b="b", c="c", d="d")
  Filter(condition="APPLY_BOOLEAN")
    CorrelateApply(cor=$cor0, leftConditions=[$0], opKind=EQUALS, type=SEMI)
      Gather(concurrent=true)
        LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d` FROM `tbl_with_gsi1` AS `tbl_with_gsi1`")
      TopN(sort="$f0 ASC", offset=0, fetch=?0)
        Project($f0="a")
          Filter(condition="$cor0.b = b")
            Gather(concurrent=true)
              LogicalView(tables="tbl_with_gsi2[p2,p4]", shardCount=2, sql="SELECT `a`, `b` FROM `tbl_with_gsi2` AS `tbl_with_gsi2`")
HitCache:false
Source:PLAN_CACHE
cache node:
Gather.DRDS.[].single(input=LogicalView#distribution=single)
Gather.DRDS.[].single(input=LogicalView#distribution=single)
select * from tbl_with_gsi1 partition(p2) where a in (select a from tbl_with_gsi2 partition(p2,p4) where tbl_with_gsi1.b=tbl_with_gsi2.b order by a limit 5);
a,b,c,d
rollback;
# partition selection for insert select
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
insert into tbl_with_gsi1 select * from tbl_with_gsi1 partition(p2);
select * from tbl_with_gsi1 order by a;
a,b,c,d
rollback;
# partition selection for replace select
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
replace into tbl_with_gsi1 select * from tbl_with_gsi1 partition(p2);
select * from tbl_with_gsi1 order by a;
a,b,c,d
rollback;
# partition selection for single-table-update
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
explain update tbl_with_gsi1 partition(p2) set d=999;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.d=?0", RELOCATE="idxd_$", UPDATE="tbl_with_gsi1")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_`, ? FROM `tbl_with_gsi1` AS `tbl_with_gsi1` FOR UPDATE")
update tbl_with_gsi1 partition(p2) set d=999;
select * from tbl_with_gsi1 order by a;
a,b,c,d
explain update tbl_with_gsi1 partition(p2) set b=100, d=999;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.b=?0, tbl_with_gsi1.d=?1", RELOCATE="idxb_$, idxd_$", UPDATE="tbl_with_gsi1")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_`, ?, ? AS `GEN$1` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` FOR UPDATE")
select * from tbl_with_gsi1 order by a;
a,b,c,d
rollback;
# partition selection for single-table-update with point select
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
explain update tbl_with_gsi1 partition(p2) set d=999 where a=11;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.d=?0", RELOCATE="idxd_$", UPDATE="tbl_with_gsi1")
  LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_`, ? FROM `tbl_with_gsi1` AS `tbl_with_gsi1` WHERE (`a` = ?) FOR UPDATE")
update tbl_with_gsi1 partition(p2) set d=999 where a=11;
select * from tbl_with_gsi1 order by a;
a,b,c,d
explain update tbl_with_gsi1 partition(p2) set b=100, d=999 where a=11;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.b=?0, tbl_with_gsi1.d=?1", RELOCATE="idxb_$, idxd_$", UPDATE="tbl_with_gsi1")
  LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_`, ?, ? AS `GEN$1` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` WHERE (`a` = ?) FOR UPDATE")
select * from tbl_with_gsi1 order by a;
a,b,c,d
rollback;
# partition selection for multi-table-update
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
explain update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2) set tbl_with_gsi1.d=999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.d=?0, tbl_with_gsi2.d=?1", RELOCATE="idxd_$, idxd_$", UPDATE="tbl_with_gsi1, tbl_with_gsi2")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi1[p2],tbl_with_gsi2[p2]", sql="SELECT `tbl_with_gsi1`.`a`, `tbl_with_gsi1`.`b`, `tbl_with_gsi1`.`c`, `tbl_with_gsi1`.`d`, `tbl_with_gsi1`.`_drds_implicit_id_`, `tbl_with_gsi2`.`a` AS `a0`, `tbl_with_gsi2`.`b` AS `b0`, `tbl_with_gsi2`.`c` AS `c0`, `tbl_with_gsi2`.`d` AS `d0`, `tbl_with_gsi2`.`_drds_implicit_id_` AS `_drds_implicit_id_0`, ?, ? AS `GEN$1` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` INNER JOIN `tbl_with_gsi2` AS `tbl_with_gsi2` ON (`tbl_with_gsi1`.`a` = `tbl_with_gsi2`.`a`) FOR UPDATE")
update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2) set tbl_with_gsi1.d=999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;
# partition selection for multi-table-update with part-col condition
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
explain update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2) set tbl_with_gsi1.d=999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a and tbl_with_gsi1.a=21;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.d=?0, tbl_with_gsi2.d=?1", RELOCATE="idxd_$, idxd_$", UPDATE="tbl_with_gsi1, tbl_with_gsi2")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi1[p2],tbl_with_gsi2[p2]", sql="SELECT `tbl_with_gsi1`.`a`, `tbl_with_gsi1`.`b`, `tbl_with_gsi1`.`c`, `tbl_with_gsi1`.`d`, `tbl_with_gsi1`.`_drds_implicit_id_`, `tbl_with_gsi2`.`a` AS `a0`, `tbl_with_gsi2`.`b` AS `b0`, `tbl_with_gsi2`.`c` AS `c0`, `tbl_with_gsi2`.`d` AS `d0`, `tbl_with_gsi2`.`_drds_implicit_id_` AS `_drds_implicit_id_0`, ?, ? AS `GEN$1` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` INNER JOIN `tbl_with_gsi2` AS `tbl_with_gsi2` ON (((`tbl_with_gsi2`.`a` = ?) AND (`tbl_with_gsi1`.`a` = `tbl_with_gsi2`.`a`)) AND (`tbl_with_gsi1`.`a` = ?)) FOR UPDATE")
update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2) set tbl_with_gsi1.d=999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a and tbl_with_gsi1.a=21;
explain update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2) set tbl_with_gsi1.d=999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a and tbl_with_gsi1.a=11;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.d=?0, tbl_with_gsi2.d=?1", RELOCATE="idxd_$, idxd_$", UPDATE="tbl_with_gsi1, tbl_with_gsi2")
  Gather(concurrent=true)
    LogicalView(tables="tbl_with_gsi1[p2],tbl_with_gsi2[p2]", sql="SELECT `tbl_with_gsi1`.`a`, `tbl_with_gsi1`.`b`, `tbl_with_gsi1`.`c`, `tbl_with_gsi1`.`d`, `tbl_with_gsi1`.`_drds_implicit_id_`, `tbl_with_gsi2`.`a` AS `a0`, `tbl_with_gsi2`.`b` AS `b0`, `tbl_with_gsi2`.`c` AS `c0`, `tbl_with_gsi2`.`d` AS `d0`, `tbl_with_gsi2`.`_drds_implicit_id_` AS `_drds_implicit_id_0`, ?, ? AS `GEN$1` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` INNER JOIN `tbl_with_gsi2` AS `tbl_with_gsi2` ON (((`tbl_with_gsi2`.`a` = ?) AND (`tbl_with_gsi1`.`a` = `tbl_with_gsi2`.`a`)) AND (`tbl_with_gsi1`.`a` = ?)) FOR UPDATE")
update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2) set tbl_with_gsi1.d=999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;
# partition selection for multi-table-update
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
explain update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2,p3) set tbl_with_gsi1.d=9999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.d=?0, tbl_with_gsi2.d=?1", RELOCATE="idxd_$, idxd_$", UPDATE="tbl_with_gsi1, tbl_with_gsi2")
  Project(a="a", b="b", c="c", d="d", _drds_implicit_id_="_drds_implicit_id_", a0="a0", b0="b0", c0="c0", d0="d0", _drds_implicit_id_0="_drds_implicit_id_0", GEN$0="?0", GEN$1="?1")
    BKAJoin(condition="a = a", type="inner")
      Gather(concurrent=true)
        LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` FOR UPDATE")
      Gather(concurrent=true)
        LogicalView(tables="tbl_with_gsi2[p2,p3]", shardCount=2, sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_` FROM `tbl_with_gsi2` AS `tbl_with_gsi2` WHERE (`a` IN (...)) FOR UPDATE")
update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2,p3) set tbl_with_gsi1.d=999, tbl_with_gsi2.d=999 where tbl_with_gsi1.a=tbl_with_gsi2.a;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;
# partition selection for multi-table-update with three-table-join
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
select * from tbl_with_gsi3 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
explain update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2,p3),tbl_with_gsi3 partition(p3,p3,p4,p2) set tbl_with_gsi1.d=9999, tbl_with_gsi2.d=9999,tbl_with_gsi3.d=9999 where tbl_with_gsi1.a=tbl_with_gsi2.a and tbl_with_gsi2.a=tbl_with_gsi3.a;
Logical ExecutionPlan
LogicalRelocate(TYPE=UPDATE, SET="tbl_with_gsi1.d=?0, tbl_with_gsi2.d=?1, tbl_with_gsi3.d=?2", RELOCATE="idxd_$, idxd_$, idxd_$", UPDATE="tbl_with_gsi1, tbl_with_gsi2, tbl_with_gsi3")
  Project(a="a", b="b", c="c", d="d", _drds_implicit_id_="_drds_implicit_id_", a0="a0", b0="b0", c0="c0", d0="d0", _drds_implicit_id_0="_drds_implicit_id_0", a1="a1", b1="b1", c1="c1", d1="d1", _drds_implicit_id_1="_drds_implicit_id_1", GEN$0="?0", GEN$1="?1", GEN$2="?2")
    BKAJoin(condition="a0 = a AND a = a", type="inner")
      BKAJoin(condition="a = a", type="inner")
        Gather(concurrent=true)
          LogicalView(tables="tbl_with_gsi1[p2]", sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_` FROM `tbl_with_gsi1` AS `tbl_with_gsi1` FOR UPDATE")
        Gather(concurrent=true)
          LogicalView(tables="tbl_with_gsi2[p2,p3]", shardCount=2, sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_` FROM `tbl_with_gsi2` AS `tbl_with_gsi2` WHERE (`a` IN (...)) FOR UPDATE")
      Gather(concurrent=true)
        LogicalView(tables="tbl_with_gsi3[p2,p3,p4]", shardCount=3, sql="SELECT `a`, `b`, `c`, `d`, `_drds_implicit_id_` FROM `tbl_with_gsi3` AS `tbl_with_gsi3` WHERE (`a` IN (...)) FOR UPDATE")
update tbl_with_gsi1 partition(p2),tbl_with_gsi2 partition(p2,p3),tbl_with_gsi3 partition(p3,p3,p4,p2) set tbl_with_gsi1.d=9999, tbl_with_gsi2.d=9999,tbl_with_gsi3.d=9999 where tbl_with_gsi1.a=tbl_with_gsi2.a and tbl_with_gsi2.a=tbl_with_gsi3.a;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
select * from tbl_with_gsi3 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;
# partition selection for single-table-delete
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
delete from tbl_with_gsi1 partition(p2);
select * from tbl_with_gsi1 order by a;
a,b,c,d
rollback;
# partition selection for single-table-delete point-select
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
delete from tbl_with_gsi1 partition(p2);
select * from tbl_with_gsi1 order by a;
a,b,c,d
rollback;
# partition selection for multi-table-delete
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
delete tbl_with_gsi1, tbl_with_gsi2 from tbl_with_gsi1 partition(p2) inner join tbl_with_gsi2 partition(p2) where tbl_with_gsi1.a=tbl_with_gsi2.a;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;
# partition selection for multi-table-delete with part-col condition
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
delete tbl_with_gsi1, tbl_with_gsi2 from tbl_with_gsi1 partition(p2) inner join tbl_with_gsi2 partition(p2) where tbl_with_gsi1.a=tbl_with_gsi2.a and tbl_with_gsi1.a=11;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;
# partition selection for multi-table-delete
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
delete tbl_with_gsi1, tbl_with_gsi2 from tbl_with_gsi1 partition(p2) inner join tbl_with_gsi2 partition(p2,p3) where tbl_with_gsi1.a=tbl_with_gsi2.a;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;
# partition selection for multi-table-delete with three-tbl-join
begin;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
select * from tbl_with_gsi3 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
delete tbl_with_gsi1, tbl_with_gsi2,tbl_with_gsi3 from tbl_with_gsi1 partition(p2) inner join tbl_with_gsi2 partition(p2,p3) inner join tbl_with_gsi3 partition(p2,p2,p4,p4) where tbl_with_gsi1.a=tbl_with_gsi2.a and tbl_with_gsi2.a=tbl_with_gsi3.a;
select * from tbl_with_gsi1 order by a;
a,b,c,d
select * from tbl_with_gsi2 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
select * from tbl_with_gsi3 order by a;
a,b,c,d
11,111,300,111
22,222,300,222
33,333,300,333
44,444,300,444
rollback;