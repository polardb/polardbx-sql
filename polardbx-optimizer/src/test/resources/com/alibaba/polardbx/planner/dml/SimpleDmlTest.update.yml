- sql: |
    update test_hash_tb set name = 'a' where id = 1;

  plan: |
    logicalmodifyview(tables="optest_0001.test_hash_tb", sql="update `test_hash_tb` as `test_hash_tb` force index(`primary`) set `name` = ? where (`id` = ?)")
  # UnSupport update ignore
#- sql: |
#    update ignore test_hash_tb set name = 'a' where id = 1;

#  plan: |
#
#    LogicalModifyView(tables="optest_0001.test_hash_tb", sql="UPDATE IGNORE `test_hash_tb` AS `test_hash_tb` SET `name` = ? WHERE (`id` = ?)")

- sql: |
    /*TDDL:FORBID_EXECUTE_DML_ALL=FALSE*/update test_hash_tb set name = 'a';

  plan: |

    LogicalModifyView(tables="[0000-0003].test_hash_tb", shardCount=4, sql="UPDATE `test_hash_tb` AS `test_hash_tb` SET `name` = ?")

- sql: |
    update test_hash_tb set name = 'a' where id in (select id from test_hash_ta where id > 5)

  plan: |

    LogicalModifyView(tables="[0000-0003].test_hash_tb,test_hash_ta", shardCount=4, sql="UPDATE `test_hash_tb` AS `test_hash_tb` SET `name` = ? WHERE (`id` IN (SELECT `id` FROM `test_hash_ta` AS `test_hash_ta` WHERE (`id` > ?)))")

- sql: |
    update test_hash_tb set name = 'a' limit 10;

  plan: |

    LogicalModify(TYPE="UPDATE", SET="test_hash_tb.name=?0")
      MergeSort(sort="", fetch=?1)
        LogicalView(tables="[0000-0003].test_hash_tb", shardCount=4, sql="SELECT `id`, `name`, `create_time`, ? FROM `test_hash_tb` AS `test_hash_tb` LIMIT ? FOR UPDATE")

- sql: |
    update test_hash_tb set name 'a' order by id limit 10;

  plan: |
    err-code: [pxc-4500][err_parser] syntax error, expect eq, actual literal_chars pos 32, line 1, column 30, token literal_chars a

- sql: |
    update test_hash_tb set name = 'a' where id = 1 limit 10;

  plan: |
    logicalmodifyview(tables="optest_0001.test_hash_tb", sql="update `test_hash_tb` as `test_hash_tb` force index(`primary`) set `name` = ? where (`id` = ?) limit ?")
- sql: |
    update test_hash_tb set name = 'a' where id = 1 order by id limit 10;

  plan: |
    logicalmodifyview(tables="optest_0001.test_hash_tb", sql="update `test_hash_tb` as `test_hash_tb` force index(`primary`) set `name` = ? where (`id` = ?) order by `id` limit ?")
- sql: |
    /*TDDL:FORBID_EXECUTE_DML_ALL=FALSE*/update test_hash_tb set name = 'a' order by id;

  plan: |

    LogicalModifyView(tables="[0000-0003].test_hash_tb", shardCount=4, sql="UPDATE `test_hash_tb` AS `test_hash_tb` SET `name` = ?")

- sql: |
    update test_hash_tb set id = 5 where id = 1 order by id limit 10;

  plan: |
    logicalrelocate(type=update, set="test_hash_tb.id=?0", relocate="test_hash_tb")
      logicalview(tables="optest_0001.test_hash_tb", sql="select `id`, `name`, `create_time`, ? from `test_hash_tb` as `test_hash_tb` force index(`primary`) where (`id` = ?) order by `id` limit ? for update")
- sql: |
    /*TDDL:FORBID_EXECUTE_DML_ALL=FALSE*/update test_single set name = 'a'

  plan: |

    LogicalView(tables="optest_0000.test_single", sql="UPDATE `test_single` AS `test_single` SET `name` = ?", params="a")

- sql: |
    update test_single set name = 'a' where name = 'test';

  plan: |

    LogicalView(tables="optest_0000.test_single", sql="UPDATE `test_single` AS `test_single` SET `name` = ? WHERE (`name` = ?)", params="a,test")

- sql: |
    update test_single set name = 'a' where name = 'test' order by name;

  plan: |

    LogicalView(tables="optest_0000.test_single", sql="UPDATE `test_single` AS `test_single` SET `name` = ? WHERE (`name` = ?) ORDER BY `name`", params="a,test")

- sql: |
    update test_single set name = 'a' where name = 'test' order by name limit 10;

  plan: |

    LogicalView(tables="optest_0000.test_single", sql="UPDATE `test_single` AS `test_single` SET `name` = ? WHERE (`name` = ?) ORDER BY `name` LIMIT ?", params="a,test,10")

- sql: |
    update test_single set id = 5 where id in (select id from test_hash_ta where id > 10);

  plan: |
    logicalmodify(type="update", set="test_single.id=?0")
      project(id="id", name="name", create_time="create_time", gen$0="?0")
        semibkajoin(condition="id = id", type="semi")
          logicalview(tables="optest_0000.test_single", sql="select `id`, `name`, `create_time` from `test_single` as `test_single` where (`id` > ?) for update")
          gather(concurrent=true)
            logicalview(tables="[0000-0003].test_hash_ta", shardcount=4, sql="select `id` from `test_hash_ta` as `test_hash_ta` force index(`primary`) where ((`id` > ?) and (`id` in (...))) for update")
- sql: |
    update optest.test_single set test_single.name = 'a' where optest.test_single.name = 'test' order by optest.test_single.name limit 10;

  plan: |

    LogicalView(tables="optest_0000.test_single", sql="UPDATE `test_single` AS `test_single` SET `name` = ? WHERE (`test_single`.`name` = ?) ORDER BY `test_single`.`name` LIMIT ?", params="a,test,10")
