- sql: |
    select *,
     sum(id2) over (partition by id1 order by id2 asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow1,
     sum(id3) over (partition by id1 order by id3 desc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow2 
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o0="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [2 DESC-nulls-last] rows between $4 PRECEDING and $4 FOLLOWING aggs [SUM($2)])", constants="[1]")
      MemSort(sort="id1 ASC,id3 DESC")
        SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", Reference Windows="window#0=window(partition {0} order by [1 ASC-nulls-first] rows between $3 PRECEDING and $3 FOLLOWING aggs [SUM($1)])", constants="[1]")
          MergeSort(sort="id1 ASC,id2 ASC")
            LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`, `id2`")

- sql: |
    select *,
     sum(id2) over (partition by id1 order by id2 asc RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow1,
     sum(id3) over (partition by id1 order by id3 desc RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow2 
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o0="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [2 DESC-nulls-last] range between $4 PRECEDING and $4 FOLLOWING aggs [SUM($2)])", constants="[1]")
      MemSort(sort="id1 ASC,id3 DESC")
        SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", Reference Windows="window#0=window(partition {0} order by [1 ASC-nulls-first] range between $3 PRECEDING and $3 FOLLOWING aggs [SUM($1)])", constants="[1]")
          MergeSort(sort="id1 ASC,id2 ASC")
            LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`, `id2`")

- sql: |
    select *,
     sum(id2) over (partition by id1 ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) ow1,
     sum(id3) over (partition by id1 ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) ow2
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", f4w0$o1="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [] rows between $3 PRECEDING and UNBOUNDED FOLLOWING aggs [SUM($1), SUM($2)])", constants="[1]")
      MergeSort(sort="id1 ASC")
        LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`")

- sql: |
    select *,
     sum(id2) over (partition by id1 order by id2 asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow1,
     sum(id3) over (partition by id1 order by id3 desc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow2 
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o0="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [2 DESC-nulls-last] rows between $4 PRECEDING and $4 FOLLOWING aggs [SUM($2)])", constants="[1]")
      MemSort(sort="id1 ASC,id3 DESC")
        SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", Reference Windows="window#0=window(partition {0} order by [1 ASC-nulls-first] rows between $3 PRECEDING and $3 FOLLOWING aggs [SUM($1)])", constants="[1]")
          MergeSort(sort="id1 ASC,id2 ASC")
            LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`, `id2`")

- sql: |
    select *,
     sum(id2) over (partition by id1 order by id2 asc RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) ow1,
     sum(id3) over (partition by id1 order by id3 desc RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) ow2 
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o0="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [2 DESC-nulls-last] range between $4 PRECEDING and UNBOUNDED FOLLOWING aggs [SUM($2)])", constants="[1]")
      MemSort(sort="id1 ASC,id3 DESC")
        SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", Reference Windows="window#0=window(partition {0} order by [1 ASC-nulls-first] range between $3 PRECEDING and UNBOUNDED FOLLOWING aggs [SUM($1)])", constants="[1]")
          MergeSort(sort="id1 ASC,id2 ASC")
            LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`, `id2`")

- sql: |
    select *,
     sum(id2) over (partition by id1 order by id2 asc ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) ow1,
     sum(id3) over (partition by id1 order by id3 desc ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) ow2 
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o0="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [2 DESC-nulls-last] rows between UNBOUNDED PRECEDING and $4 FOLLOWING aggs [SUM($2)])", constants="[1]")
      MemSort(sort="id1 ASC,id3 DESC")
        SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", Reference Windows="window#0=window(partition {0} order by [1 ASC-nulls-first] rows between UNBOUNDED PRECEDING and $3 FOLLOWING aggs [SUM($1)])", constants="[1]")
          MergeSort(sort="id1 ASC,id2 ASC")
            LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`, `id2`")

- sql: |
    select *,
     sum(id2) over (partition by id1 order by id2 asc RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) ow1,
     sum(id3) over (partition by id1 order by id3 desc RANGE BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) ow2 
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o0="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [2 DESC-nulls-last] range between UNBOUNDED PRECEDING and $4 FOLLOWING aggs [SUM($2)])", constants="[1]")
      MemSort(sort="id1 ASC,id3 DESC")
        SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", Reference Windows="window#0=window(partition {0} order by [1 ASC-nulls-first] range between UNBOUNDED PRECEDING and $3 FOLLOWING aggs [SUM($1)])", constants="[1]")
          MergeSort(sort="id1 ASC,id2 ASC")
            LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`, `id2`")

- sql: |
    select *,
     sum(id2) over (partition by id1 order by id2 asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow1,
     sum(id3) over (partition by id1 order by id3 desc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow2 
    from testwin;

  plan: |

    SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o0="window#0SUM($2)", Reference Windows="window#0=window(partition {0} order by [2 DESC-nulls-last] rows between $4 PRECEDING and $4 FOLLOWING aggs [SUM($2)])", constants="[1]")
      MemSort(sort="id1 ASC,id3 DESC")
        SortWindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0SUM($1)", Reference Windows="window#0=window(partition {0} order by [1 ASC-nulls-first] rows between $3 PRECEDING and $3 FOLLOWING aggs [SUM($1)])", constants="[1]")
          MergeSort(sort="id1 ASC,id2 ASC")
            LogicalView(tables="[0000-0003].testwin", shardCount=4, sql="SELECT `id1`, `id2`, `id3` FROM `testwin` AS `testwin` ORDER BY `id1`, `id2`")

- sql: |
    select *,
     avg(id2) over (partition by id1 order by id2 asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow1,
     count(id2) over (partition by id1 order by id2 asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow2,
     row_number() over (partition by id1 order by id2) ow3,
     rank() over (partition by id1 order by id2) ow4,
     sum(id3) over (partition by id1 order by id2) ow4
    from testwin;

  plan: |

    sortwindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o1="f4w0$o1", f5w1$o0="f5w1$o0", f6w1$o1="f6w1$o1", f7w0$o0="window#0sum($2)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] range between unbounded preceding and current row aggs [sum($2)])")
      sortwindow(id1="id1", id2="id2", id3="id3", f3w0$o0="f3w0$o0", f4w0$o1="f4w0$o1", f5w0$o0="window#0row_number()", f6w0$o1="window#0rank($1)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] rows between unbounded preceding and current row aggs [row_number(), rank($1)])")
        sortwindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0avg($1)", f4w0$o1="window#0count($1)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] rows between $3 preceding and $3 following aggs [avg($1), count($1)])", constants="[1]")
          mergesort(sort="id1 asc,id2 asc")
            logicalview(tables="[0000-0003].testwin", shardcount=4, sql="select `id1`, `id2`, `id3` from `testwin` as `testwin` order by `id1`, `id2`")


- sql: |
    select 
     avg(id2) over (partition by id1 order by id2 asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow1,
     count(id2) over (partition by id1 order by id2 asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow2,
     row_number() over (partition by id1 order by id2) ow3,
     rank() over (partition by id1 order by id2) ow4,
     sum(id3) over (partition by id1 order by id2) ow5,
     *
    from testwin join select_base_one_multi_db_multi_tb on select_base_one_multi_db_multi_tb.pk = testwin.id1 where select_base_one_multi_db_multi_tb.pk in (1,2) and testwin.id1 < 10;

  plan: |
    project(ow1="f21w0$o0", ow2="f22w0$o1", ow3="f23w1$o0", ow4="f24w1$o1", ow5="f25w2$o0", id1="id1", id2="id2", id3="id3", pk="pk", varchar_test="varchar_test", integer_test="integer_test", char_test="char_test", tinyint_test="tinyint_test", tinyint_1bit_test="tinyint_1bit_test", smallint_test="smallint_test", mediumint_test="mediumint_test", bit_test="bit_test", bigint_test="bigint_test", float_test="float_test", double_test="double_test", decimal_test="decimal_test", date_test="date_test", time_test="time_test", datetime_test="datetime_test", timestamp_test="timestamp_test", year_test="year_test")
      sortwindow(id1="id1", id2="id2", id3="id3", pk="pk", varchar_test="varchar_test", integer_test="integer_test", char_test="char_test", tinyint_test="tinyint_test", tinyint_1bit_test="tinyint_1bit_test", smallint_test="smallint_test", mediumint_test="mediumint_test", bit_test="bit_test", bigint_test="bigint_test", float_test="float_test", double_test="double_test", decimal_test="decimal_test", date_test="date_test", time_test="time_test", datetime_test="datetime_test", timestamp_test="timestamp_test", year_test="year_test", f21w0$o0="f21w0$o0", f22w0$o1="f22w0$o1", f23w1$o0="f23w1$o0", f24w1$o1="f24w1$o1", f25w0$o0="window#0sum($2)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] range between unbounded preceding and current row aggs [sum($2)])")
        sortwindow(id1="id1", id2="id2", id3="id3", pk="pk", varchar_test="varchar_test", integer_test="integer_test", char_test="char_test", tinyint_test="tinyint_test", tinyint_1bit_test="tinyint_1bit_test", smallint_test="smallint_test", mediumint_test="mediumint_test", bit_test="bit_test", bigint_test="bigint_test", float_test="float_test", double_test="double_test", decimal_test="decimal_test", date_test="date_test", time_test="time_test", datetime_test="datetime_test", timestamp_test="timestamp_test", year_test="year_test", f21w0$o0="f21w0$o0", f22w0$o1="f22w0$o1", f23w0$o0="window#0row_number()", f24w0$o1="window#0rank($1)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] rows between unbounded preceding and current row aggs [row_number(), rank($1)])")
          sortwindow(id1="id1", id2="id2", id3="id3", pk="pk", varchar_test="varchar_test", integer_test="integer_test", char_test="char_test", tinyint_test="tinyint_test", tinyint_1bit_test="tinyint_1bit_test", smallint_test="smallint_test", mediumint_test="mediumint_test", bit_test="bit_test", bigint_test="bigint_test", float_test="float_test", double_test="double_test", decimal_test="decimal_test", date_test="date_test", time_test="time_test", datetime_test="datetime_test", timestamp_test="timestamp_test", year_test="year_test", f21w0$o0="window#0avg($1)", f22w0$o1="window#0count($1)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] rows between $21 preceding and $21 following aggs [avg($1), count($1)])", constants="[1]")
            bkajoin(condition="id1 = pk", type="inner")
              mergesort(sort="id1 asc,id2 asc")
                logicalview(tables="[0000-0003].testwin", shardcount=4, sql="select `id1`, `id2`, `id3` from `testwin` as `testwin` where ((`id1` < 10) and (`id1` in(1, 2))) order by `id1`, `id2`")
              gather(concurrent=true)
                logicalview(tables="[0000-0002].select_base_one_multi_db_multi_tb_[00-09]", shardcount=10, sql="select `pk`, `varchar_test`, `integer_test`, `char_test`, `tinyint_test`, `tinyint_1bit_test`, `smallint_test`, `mediumint_test`, `bit_test`, `bigint_test`, `float_test`, `double_test`, `decimal_test`, `date_test`, `time_test`, `datetime_test`, `timestamp_test`, `year_test` from `select_base_one_multi_db_multi_tb` as `select_base_one_multi_db_multi_tb` where (((`pk` in(1, 2)) and (`pk` < 10)) and (`pk` in (...)))")

- sql: |
    select 

     percent_rank() over (partition by id1 order by id2) ow7,
     cume_dist() over (partition by id1 order by id2) ow8,
     lag(id3) over (partition by id1 order by id2) ow9,
     lead(id3) over (partition by id1 order by id2) ow10,
     *
    from testwin join select_base_one_multi_db_multi_tb on select_base_one_multi_db_multi_tb.pk = testwin.id1 where select_base_one_multi_db_multi_tb.pk in (1,2) and testwin.id1 < 10;

  plan: |
    project(ow7="f21w0$o0", ow8="f22w0$o1", ow9="f23w0$o2", ow10="f24w0$o3", id1="id1", id2="id2", id3="id3", pk="pk", varchar_test="varchar_test", integer_test="integer_test", char_test="char_test", tinyint_test="tinyint_test", tinyint_1bit_test="tinyint_1bit_test", smallint_test="smallint_test", mediumint_test="mediumint_test", bit_test="bit_test", bigint_test="bigint_test", float_test="float_test", double_test="double_test", decimal_test="decimal_test", date_test="date_test", time_test="time_test", datetime_test="datetime_test", timestamp_test="timestamp_test", year_test="year_test")
      sortwindow(id1="id1", id2="id2", id3="id3", pk="pk", varchar_test="varchar_test", integer_test="integer_test", char_test="char_test", tinyint_test="tinyint_test", tinyint_1bit_test="tinyint_1bit_test", smallint_test="smallint_test", mediumint_test="mediumint_test", bit_test="bit_test", bigint_test="bigint_test", float_test="float_test", double_test="double_test", decimal_test="decimal_test", date_test="date_test", time_test="time_test", datetime_test="datetime_test", timestamp_test="timestamp_test", year_test="year_test", f21w0$o0="window#0percent_rank($1)", f22w0$o1="window#0cume_dist($1)", f23w0$o2="window#0lag($2)", f24w0$o3="window#0lead($2)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] rows between unbounded preceding and unbounded following aggs [percent_rank($1), cume_dist($1), lag($2), lead($2)])")
        bkajoin(condition="id1 = pk", type="inner")
          mergesort(sort="id1 asc,id2 asc")
            logicalview(tables="[0000-0003].testwin", shardcount=4, sql="select `id1`, `id2`, `id3` from `testwin` as `testwin` where ((`id1` < 10) and (`id1` in(1, 2))) order by `id1`, `id2`")
          gather(concurrent=true)
            logicalview(tables="[0000-0002].select_base_one_multi_db_multi_tb_[00-09]", shardcount=10, sql="select `pk`, `varchar_test`, `integer_test`, `char_test`, `tinyint_test`, `tinyint_1bit_test`, `smallint_test`, `mediumint_test`, `bit_test`, `bigint_test`, `float_test`, `double_test`, `decimal_test`, `date_test`, `time_test`, `datetime_test`, `timestamp_test`, `year_test` from `select_base_one_multi_db_multi_tb` as `select_base_one_multi_db_multi_tb` where (((`pk` in(1, 2)) and (`pk` < 10)) and (`pk` in (...)))")

- sql: |
    select 
      first_value(id3) over (partition by id1 order by id2) ow11,
      last_value(id3) over (partition by id1 order by id2) ow12
    from testwin join select_base_one_multi_db_multi_tb on select_base_one_multi_db_multi_tb.pk = testwin.id1 where select_base_one_multi_db_multi_tb.pk in (1,2) and testwin.id1 < 10;
  plan: |
    project($0="f21w0$o0", $1="f22w0$o1")
      sortwindow(id1="id1", id2="id2", id3="id3", f3w0$o0="window#0first_value($2)", f4w0$o1="window#0last_value($2)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] range between unbounded preceding and current row aggs [first_value($2), last_value($2)])")
        project(id1="id1", id2="id2", id3="id3")
          bkajoin(condition="id1 = pk", type="inner")
            mergesort(sort="id1 asc,id2 asc")
              logicalview(tables="[0000-0003].testwin", shardcount=4, sql="select `id1`, `id2`, `id3` from `testwin` as `testwin` where ((`id1` < 10) and (`id1` in(1, 2))) order by `id1`, `id2`")
            gather(concurrent=true)
              logicalview(tables="[0000-0002].select_base_one_multi_db_multi_tb_[00-09]", shardcount=10, sql="select `pk` from `select_base_one_multi_db_multi_tb` as `select_base_one_multi_db_multi_tb` where (((`pk` in(1, 2)) and (`pk` < 10)) and (`pk` in (...)))")

- sql: |
    select
      dense_rank() over (partition by id1 order by id2) ow6
      from testwin join select_base_one_multi_db_multi_tb on select_base_one_multi_db_multi_tb.pk = testwin.id1 where select_base_one_multi_db_multi_tb.pk in (1,2) and testwin.id1 < 10;
  plan: |
    project($0="f21w0$o0")
      sortwindow(id1="id1", id2="id2", f2w0$o0="window#0dense_rank($1)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] rows between unbounded preceding and current row aggs [dense_rank($1)])")
        project(id1="id1", id2="id2")
          bkajoin(condition="id1 = pk", type="inner")
            mergesort(sort="id1 asc,id2 asc")
              logicalview(tables="[0000-0003].testwin", shardcount=4, sql="select `id1`, `id2` from `testwin` as `testwin` where ((`id1` < 10) and (`id1` in(1, 2))) order by `id1`, `id2`")
            gather(concurrent=true)
              logicalview(tables="[0000-0002].select_base_one_multi_db_multi_tb_[00-09]", shardcount=10, sql="select `pk` from `select_base_one_multi_db_multi_tb` as `select_base_one_multi_db_multi_tb` where (((`pk` in(1, 2)) and (`pk` < 10)) and (`pk` in (...)))")

- sql: |
    select * from (
      select
        sum(tinyint_test) over (partition by integer_test order by tinyint_test asc ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) ow1
        from select_base_one_multi_db_multi_tb
      ) T;

  plan: |

    project(ow1="f2w0$o0")
      sortwindow(integer_test="integer_test", tinyint_test="tinyint_test", f2w0$o0="window#0sum($1)", reference windows="window#0=window(partition {0} order by [1 asc-nulls-first] rows between $2 preceding and $2 following aggs [sum($1)])", constants="[1]")
        mergesort(sort="integer_test asc,tinyint_test asc")
          logicalview(tables="[0000-0003].select_base_one_multi_db_multi_tb_[00-15]", shardcount=16, sql="select `integer_test`, `tinyint_test` from `select_base_one_multi_db_multi_tb` as `select_base_one_multi_db_multi_tb` order by `integer_test`, `tinyint_test`")