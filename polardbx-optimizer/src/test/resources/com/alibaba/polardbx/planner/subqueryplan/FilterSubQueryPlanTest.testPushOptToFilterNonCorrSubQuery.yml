- sql: |
    select a.id
    from 
      test_hash_tb a
    where 
      a.id > 5
      and
        (
          a.int_col1=1

          or 

          (
            a.int_col2=1

            and 

            (
              a.int_col3=1

              or 

              (
                a.int_col4=1

                and 

                a.int_col5=5

                and

                (

                  a.int_col6=6

                  or 

                  a.id in (select id from test_hash_tb3)

                )
              )
            )
          )

        )



  plan: |
    gather(concurrent=true)
      logicalview(tables="[0000-0003].test_hash_tb", shardcount=4, sql="select `id` from `test_hash_tb` as `test_hash_tb` where ((`id` > 5) and ((`int_col1` = 1) or ((`int_col2` = 1) and ((`int_col3` = 1) or (((`int_col4` = 1) and (`int_col5` = 5)) and ((`int_col6` = 6) or (`id` in(?))))))))")

    >> individual scalar subquery :
    gather(concurrent=true)
      logicalview(tables="[0000-0003].test_hash_tb3", shardcount=4, sql="select `id` from `test_hash_tb3` as `test_hash_tb3`")


- sql: |
    select a.id, a.name
    from
      test_hash_tb a
      join
      test_hash_tb2 b
      on a.id=b.id
    where
      a.id in (select id from test_hash_tb3 limit 1)

  plan: |

    gather(concurrent=true)
      logicalview(tables="[0000-0003].test_hash_tb,test_hash_tb2", shardcount=4, sql="select `test_hash_tb`.`id`, `test_hash_tb`.`name` from `test_hash_tb` as `test_hash_tb` inner join `test_hash_tb2` as `test_hash_tb2` on (`test_hash_tb`.`id` = `test_hash_tb2`.`id`) where (`test_hash_tb`.`id` in(?))")

    >> individual scalar subquery :
    mergesort(sort="", offset=0, fetch=1)
      logicalview(tables="[0000-0003].test_hash_tb3", shardcount=4, sql="select `id` from `test_hash_tb3` as `test_hash_tb3` limit 1")


- sql: |
    select a.id, a.name
    from
      test_hash_tb a
      join
      test_hash_tb2 b
      on a.id=b.id
    where
      (a.id, a.name) in (select id,name from test_hash_tb3 limit 1)

  plan: |
    Project(id="id", name="name")
      Filter(condition="APPLY_BOOLEAN")
        CorrelateApply(cor=$cor0, leftConditions=[$0, $1], opKind=EQUALS, type=SEMI)
          Gather(concurrent=true)
            LogicalView(tables="[0000-0003].test_hash_tb,test_hash_tb2", shardCount=4, sql="SELECT `test_hash_tb`.`id`, `test_hash_tb`.`name` FROM `test_hash_tb` AS `test_hash_tb` INNER JOIN `test_hash_tb2` AS `test_hash_tb2` ON (`test_hash_tb`.`id` = `test_hash_tb2`.`id`)")
          MergeSort(sort="", offset=0, fetch=1)
            LogicalView(tables="[0000-0003].test_hash_tb3", shardCount=4, sql="SELECT `id` AS `$f0`, `name` AS `$f1` FROM `test_hash_tb3` AS `test_hash_tb3` LIMIT 1")
    cache node:

    Gather(concurrent=true)
      LogicalView(tables="[0000-0003].test_hash_tb,test_hash_tb2", shardCount=4, sql="SELECT `test_hash_tb`.`id`, `test_hash_tb`.`name` FROM `test_hash_tb` AS `test_hash_tb` INNER JOIN `test_hash_tb2` AS `test_hash_tb2` ON (`test_hash_tb`.`id` = `test_hash_tb2`.`id`)")
    MergeSort(sort="", offset=0, fetch=1)
      LogicalView(tables="[0000-0003].test_hash_tb3", shardCount=4, sql="SELECT `id` AS `$f0`, `name` AS `$f1` FROM `test_hash_tb3` AS `test_hash_tb3` LIMIT 1")

- sql: |
    # test column subquery on where filter
    select a.id, a.name
    from
      test_hash_tb a
      join
      test_hash_tb2 b
      on a.id=b.id
    where
      a.id=(select id from test_hash_tb3 order by id limit 1)



  plan: |

    gather(concurrent=true)
      logicalview(tables="[0000-0003].test_hash_tb,test_hash_tb2", shardcount=4, sql="select `test_hash_tb`.`id`, `test_hash_tb`.`name` from `test_hash_tb` as `test_hash_tb` inner join `test_hash_tb2` as `test_hash_tb2` on (`test_hash_tb`.`id` = `test_hash_tb2`.`id`) where (`test_hash_tb`.`id` = ?)")

    >> individual scalar subquery :
    MergeSort(sort="id asc", offset=0, fetch=1)
      LogicalView(tables="[0000-0003].test_hash_tb3", shardCount=4, sql="SELECT `id` FROM `test_hash_tb3` AS `test_hash_tb3` order by `id` LIMIT 1")


- sql: |
    # test row subquery on where filter
    select a.id, a.name
    from 
      test_hash_tb a
      join
      test_hash_tb2 b
      on a.id=b.id 
    where 
      (a.id, a.name) = (select id,name from test_hash_tb3 limit 1)

  plan: |

    The size of arguments in SCALAR_QUERY must be one.

- sql: |
    select a.id, a.name
    from 
      test_hash_tb a
      join
      test_hash_tb2 b
      on a.id=b.id and a.id=(select id from test_hash_tb2 limit 1)
    where a.name='xxx'


  plan: |

    ERR-CODE: [PXC-4998][ERR_NOT_SUPPORT] subquery in join not support yet!
